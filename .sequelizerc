const fs = require('fs');
const path = require('path');

const env = process.env.NODE_ENV || 'sqlite';
const storage = process.env.DB_STORAGE;

if (env === 'postgres') {
  writePostgresConfig();
} else {
  writeSqliteConfig();
}

function writeSqliteConfig() {
  const userDataFolderPath = require('platform-folders').getConfigHome();
  const userDataProcessEngineFolderName = 'process_engine_runtime';
  const processEngineDatabaseFolderName = 'databases';

  const databaseBasePath = path.join(userDataFolderPath, userDataProcessEngineFolderName, processEngineDatabaseFolderName);

  const storagePath = path.join(databaseBasePath, `${storage}.sqlite`);

  const sqliteConfig = `{
    "info": "This file is auto generated and required by the sequelize-cli. Please do not remove.",
    "username": null,
    "password": null,
    "database": null,
    "host": null,
    "port": null,
    "dialect": "sqlite",
    "storage": "${storagePath}",
    "supportBigNumbers": true,
    "resetPasswordRequestTimeToLive": 12,
    "logging": false
  }`;

  fs.writeFileSync('./sequelize/sqlite.json', sqliteConfig, 'utf-8');
}

function writePostgresConfig() {
  const postgresConfig = `{
    "info": "This file is auto generated and required by the sequelize-cli. Please do not remove.",
    "username": "admin",
    "password": "admin",
    "database": "${storage}",
    "host": "localhost",
    "port": 5432,
    "dialect": "postgres",
    "storage": null,
    "supportBigNumbers": true,
    "resetPasswordRequestTimeToLive": 12,
    "logging": false
  }`;

  fs.writeFileSync('./sequelize/postgres.json', postgresConfig, 'utf-8');
}

module.exports = {
  'config': path.resolve('sequelize', `${env}.json`),
  'migrations-path': path.resolve('sequelize', `migrations/${storage}`)
}
