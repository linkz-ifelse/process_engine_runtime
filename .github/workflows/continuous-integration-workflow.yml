name: Node CI

on: [push]

jobs:
  prepare_version:
    name: Prepare Version
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@master

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

    - name: Install Dependencies
      run: |
        npm ci
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/

    - name: Prepare version
      run: |
        ./node_modules/.bin/ci_tools prepare-version --allow-dirty-workdir

    - name: Get package version
      run: echo "##[set-output name=version;]$(node --print --eval "require('./package.json').version")"
      id: package_version

    - name: Log Version
      run: |
        echo $VERSION
      env:
        VERSION: ${{ steps.package_version.outputs.version }}

    - name: Stash package.json
      uses: actions/upload-artifact@master
      with:
        name: package_json
        path: package.json

  lint_linux:
    name: "Lint sources"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

    - run: npm run lint
      name: Lint sources

  test_sqlite:
    name: "Test with SQLite"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

    - name: Build
      run: |
        npm run build
        npm rebuild

    - name: Run tests
      run: npm run test-sqlite

  test_postgres:
    name: "Test with Postgres"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

  #  - name: Install Dependencies
  #    run: |
  #      npm ci
  #      ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/

    - name: Build
      run: npm run build

    - name: Start Postgres Docker Container
      run: |
        docker run -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=admin -e POSTGRES_USER=admin -e POSTGRES_DB=processengine -d postgres:11
        docker ps

        #while ! pg_isready; do sleep 1; done
   # - name: Check online
   #   run: |
   #     docker exec -i postgres bash
   #     while ! pg_isready; do sleep 1; done
   #     exit
      #run: PORT=5432 npm run check-online-status

    - name: Run tests
      run: npm run test-postgres

    - run: |
        docker ps -a
        docker logs postgres
      if: always()

  test_mysql:
    name: "Test with MySQL"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

  #  - name: Install Dependencies
  #    run: |
  #      npm ci
  #      ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/

    - name: Build
      run: npm run build

    - name: Status mysql
      run: sudo service mysql status
  #  - name: Shutdown Ubuntu MySQL (SUDO)
  #    run: sudo service mysql stop
#
    #- name: Start MySQL Docker Container
    #  run: |
    #    docker run -p 3306:3306 --name mysql -e MYSQL_HOST=db -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=processengine -e MYSQL_USER=admin -e MYSQL_PASSWORD=admin -d mysql:5 --connect-timeout=800
    #    docker ps

   # - name: Check online
   #   run: |
   #     docker exec -i mysql bash
   #     while ! mysqladmin ping -hdb --silent; do sleep 1; done
   #     exit
      #run: PORT=3306 npm run check-online-status

    - name: Run tests
      run: npm run test-mysql

    - run: |
        docker ps -a
        docker logs mysql
      if: always()

  create_sources_linux:
    name: "Create tarball from linux sources"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

    - name: Build
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: |
        npm run build
        npm run create-tarball

    - name: Stash Tarball
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/upload-artifact@master
      with:
        name: process_engine_runtime_linux_tar
        path: process_engine_runtime_linux.tar.gz

  create_sources_macos:
    name: "Create tarball from macOS sources"
    needs: prepare_version
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

  #  - name: Install npm dependencies
  #    #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
  #    run: |
  #      cat package.json
  #      npm ci
  #      ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/

    - name: Build
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: |
        npm run build
        npm rebuild
        npm run create-tarball

    - name: Stash Tarball
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/upload-artifact@master
      with:
        name: process_engine_runtime_macos_tar
        path: process_engine_runtime_macos.tar.gz

  create_sources_windows:
    name: "Create zip file from Windows sources"
    needs: prepare_version
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

  #  - name: Install npm dependencies
  #    #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
  #    run: |
  #      cat package.json
  #      npm ci
  #      ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/

    - name: Build
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: |
        npm run build
        npm rebuild
        npm run create-zipfile

    - name: Stash Tarball
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/upload-artifact@master
      with:
        name: process_engine_runtime_windows_zip
        path: process_engine_runtime_windows.zip

  build_windows_installer:
    name: "Build Windows installer"
    needs: prepare_version
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Install npm dependencies
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: |
        cat package.json
        npm ci
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/

    - name: Build
      shell: cmd
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: |
        npm run build
        npm rebuild

    - name: Build Executable
      run: npm run build-windows-executable

    - name: Get package version
      run: echo "##[set-output name=version;]$(node --print --eval "require('./package.json').version")"
      id: package_version

    - name: Build Installer
      run: iscc "/DProcessEngineRuntimeVersion=%full_release_version_string%" installer\\inno-installer.iss
      shell: cmd
      env:
        full_release_version_string: ${{ steps.package_version.outputs.version }}

    - name: Stash Installer
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/upload-artifact@master
      with:
        name: windows_installer_results
        path: installer/Output

  prepare_and_tag_version:
    name: "Commit & Tag Version"
    needs: [lint_linux, build_windows_installer, create_sources_windows, create_sources_linux, create_sources_macos, test_sqlite, test_postgres]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

    - name: Commit and Tag
      run: |
        ./node_modules/.bin/ci_tools commit-and-tag-version --only-on-primary-branches
      env:
        GH_USER: ${{ secrets.GH_USER }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

  publish_npm:
    name: "Publish npm package"
    needs: prepare_and_tag_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

    - name: Publish npm package
      run: ./node_modules/.bin/ci_tools publish-npm-package --create-tag-from-branch-name
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish_github:
    name: "Publish GitHub Release"
    needs: prepare_and_tag_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Use Node.js 12.x
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Unstash package.json
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Unstash Linux Sources
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: process_engine_runtime_linux_tar
        path: "dist"

    - name: Unstash macOS Sources
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: process_engine_runtime_macos_tar
        path: "dist"

    - name: Unstash Windows Sources
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: process_engine_runtime_windows_zip
        path: "dist"

    - name: Unstash Windows Installer
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: windows_installer_results
        path: "dist"

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: npm-${{ hashFiles('package-lock.json') }}

    - name: Test
      run: |
        ls -la
        cd dist
        ls -la
        pwd

    - name: Upload to GitHub
      if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: |
        ./node_modules/.bin/ci_tools update-github-release --only-on-primary-branches --use-title-and-text-from-git-tag
        ./node_modules/.bin/ci_tools update-github-release \
                              --assets dist/Install ProcessEngine Runtime**.exe \
                              --assets dist/process_engine_runtime_macos.tar.gz \
                              --assets dist/process_engine_runtime_linux.tar.gz \
                              --assets dist/process_engine_runtime_windows.zip
      env:
        GH_USER: ${{ secrets.GH_USER }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

  build_docker:
    name: "Build & Publish Docker Image"
    needs: prepare_and_tag_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package.json
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: package_json
        path: "."

    - name: Unstash Linux Sources
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      uses: actions/download-artifact@master
      with:
        name: process_engine_runtime_linux_tar
        path: "."

    - name: Get package version
      run: echo "##[set-output name=version;]$(node --print --eval "require('./package.json').version")"
      id: package_version

    - name: Build Docker Image
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: |
        docker build --build-arg NODE_IMAGE_VERSION=10-alpine \
                    --build-arg PROCESS_ENGINE_VERSION=$VERSION \
                    --no-cache \
                    --tag 5minds/process_engine_runtime:$VERSION .
      env:
        VERSION: ${{ steps.package_version.outputs.version }}

    - name: Show Docker Images
      #if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: docker images

    - name: Login to Docker
      if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

    - name: Push Docker Image
      if: contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'beta')
      run: docker push 5minds/process_engine_runtime
